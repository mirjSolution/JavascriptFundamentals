asyncIterator - is about iterating through the data which is coming asynchrohously or in chucks on demand instead of getting it together
- it means you can use the "for await ...of loop" instead of for...of loop"

Q.1) What is Symbol.asyncIterator?
A.1) is a way to implement iterator with asynchrohous process.
Q.2) Can we use spread operator with async iterator e.g. [...obj]?
A.2) No because asynchrohous iterator retrieve the data into small chunk asynchrohously. Whereas the spread operator return an array immediately
Q.3) How will you handle the async iterator using generator function syntax?
A.3) let obj = {
  start: 10,
  end: 15,
  async *[Symbol.asyncIterator]() {
    for (let cnt = this.start; cnt <= this.end; cnt++) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      yield cnt;
    }
  },
};

(async () => {
  for await (let i of obj) {
    console.log(i);
  }
})();