Promise.all() - When you have multiple promises as input it should return a single promise after all promises are resolved then you can use the all(), and "all" method will check the sequence mentioned in the array, and if any promise returns an error it will stop the execution use .catch in Promise.all() to return or catch the error

Promise.allSettled() - waits for all promises regardless of their state and returns Promise at the end.

Pomise.race() - returns a promise as soon as any of the promise returns the state from the iterable list provided

Q.1) What will be the output if the iterable is not a promise inside all() method arguments,e.g  as shown below where 'p2' is not a promise ?
     const p1 = new Promise((resolve,reject)=>{
     setTimeout(()=>{
         resolve("Promise1");
     },2000)
 })
     const p2 = "Normal string";
     const p3 = new Promise((resolve,reject)=>{
     setTimeout(()=>{
         resolve("Promise3");
     },2000)
 }) 
     Promise.all([p1, p2,p3]).then((prMsgs) => {
     console.log(prMsgs);
 }).catch((err)=>{
     console.log(err);
 })

 A.1) It will not result in error it will also execute and return it as normal string

Q.2) How will you handle rejected multiple promises in the most efficient way ?
A.2) If you use 'Promise.all()' it will work for all the resolved states, but if there is an error 'Promise.allSettled()' is used
Q.3)  Explain the purpose of Promise.race() method.
A.3) Promise race will execute the first promises that returns the state and it will not continue other promises even it is rejected or resolve. If you have an api that returns the same state and you just want to execute the first promise that returns that state or object.
Q.4) What will be the output of empty iterable if given as a parameter inside the race() method as shown in this code ?
        const obj = Promise.race([]);
        console.log(obj);
        setTimeout(()=>{
                 console.log(obj);
        },2000);
A.4) If there is empty iterable it will be pending forever

